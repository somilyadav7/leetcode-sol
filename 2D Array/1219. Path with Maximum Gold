class Solution {
public:
    vector<pair<int,int>> directions = {{-1,0},{0,1},{1,0},{0,-1}};

    int dfs(vector<vector<int>>& grid, int i, int j)
    {
        if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size() || grid[i][j]==0)
            return 0;
        int OriginalGold = grid[i][j];
        grid[i][j]=0;
        int maxGold=0;
        for(auto &dir:directions)
        {
            int x = i+dir.first;
            int y = j+dir.second;
            maxGold = max(maxGold,dfs(grid,x,y));
        }
        grid[i][j]=OriginalGold;
        return OriginalGold + maxGold;
    }

    int getMaximumGold(vector<vector<int>>& grid) {
        int n=grid.size(), m=grid[0].size();
        int result = 0;
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(grid[i][j]!=0)
                {
                    result = max(result,dfs(grid,i,j));
                }
            }
        }
        return result;
    }
};
