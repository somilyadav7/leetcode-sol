Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.
A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.

class Solution {
public:
    void inorder(TreeNode* root, vector<int> &arr)
    {
        if(root!=NULL)
        {
            inorder(root->left,arr);
            arr.push_back(root->val);
            inorder(root->right,arr);
        }
    }

    TreeNode* help(vector<int> &arr, int l, int r)
    {
        if(l>r)
            return NULL;
        int mid=l+(r-l)/2;
        TreeNode* root = new TreeNode(arr[mid]);
        root->left=help(arr,l,mid-1);
        root->right=help(arr,mid+1,r);
        return root;
    }

    TreeNode* balanceBST(TreeNode* root) {
        vector<int> arr;
        inorder(root,arr);
        int l=0, r=arr.size()-1;
        return help(arr,l,r);
    }
};
