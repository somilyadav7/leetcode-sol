class Solution {
public:
    int countSteps(int rindex, int idx, string ring)
    {
        int distance = abs(idx-rindex);
        int wraparound = ring.length()-distance;
        return min(distance,wraparound);
    }

    int solve(int rindex, int kindex, string ring, string key, vector<vector<int>> &dp)
    {
        if(kindex>=key.length())
            return 0;
        if(dp[rindex][kindex]!=-1)
            return dp[rindex][kindex];
        int ans = INT_MAX;
        for(int i=0; i<ring.length(); i++)
        {
            if(ring[i]==key[kindex])
            {
                int steps = 1 + countSteps(rindex,i,ring);
                int totalSteps = steps + solve(i,kindex+1,ring,key,dp);
                ans=min(ans,totalSteps);
            }
        }
        return dp[rindex][kindex]=ans;
    }

    int findRotateSteps(string ring, string key) {
        int n=ring.length();
        int m=key.length();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        return solve(0,0,ring,key,dp);
    }
};
