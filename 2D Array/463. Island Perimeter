//normal solution

class Solution {
public:    
    int islandPerimeter(vector<vector<int>>& grid) 
    {
        int peri = 0;
        int n=grid.size(), m=grid[0].size();
        for(int i = 0; i < n; i++) 
        {
            for(int j = 0; j < m; j++) 
            {    
                if(grid[i][j]==0) 
                    continue;
                if(i-1<0 || grid[i-1][j]==0)
                    peri++;
                if(i+1>=n || grid[i+1][j]==0)
                    peri++;
                if(j-1<0 || grid[i][j-1]==0)
                    peri++;
                if(j+1>=m || grid[i][j+1]==0)
                    peri++;
            }
        }
        return peri;
    }
};

//dfs
class Solution {
public:    
    void dfs(vector<vector<int>>& grid, int i, int j, int &peri) 
    {
        if(i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] == 0) {
            peri++;
            return;
        }
        if(grid[i][j] == -1) {
            return;
        }
        grid[i][j] = -1; //mark visited
        dfs(grid, i+1, j,peri);
        dfs(grid, i-1, j,peri);
        dfs(grid, i, j+1,peri);
        dfs(grid, i, j-1,peri);
    }
    
    int islandPerimeter(vector<vector<int>>& grid) 
    {
        int peri = 0;
        for(int i = 0; i < grid.size(); i++) 
        {
            for(int j = 0; j < grid[0].size(); j++) 
            {    
                if(grid[i][j] == 1) {
                    dfs(grid, i, j, peri);
                    return peri;
                }   
            }
        }
        return -1;
    }
};

//bfs

class Solution {
public:    

    void bfs(vector<vector<int>>& grid, int i, int j, int &peri) 
    {
        vector<vector<int>> dis{{-1,0},{0,1},{1,0},{0,-1}};
        queue<pair<int,int>> q;
        q.push({i,j});
        grid[i][j]=-1;
        while(!q.empty())
        {
            auto temp=q.front();
            q.pop();
            for(auto &i:dis)
            {
                int dx=temp.first+i[0];
                int dy=temp.second+i[1];
                if(dx<0 || dx>=grid.size() || dy<0 || dy>=grid[0].size() || grid[dx][dy]==0)
                    peri++;
                else if(grid[dx][dy]==-1)
                    continue;
                else{
                    q.push({dx,dy});
                    grid[dx][dy]=-1;
                }
            }
        }
    }
    
    int islandPerimeter(vector<vector<int>>& grid) 
    {
        int peri = 0;
        for(int i = 0; i < grid.size(); i++) 
        {
            for(int j = 0; j < grid[0].size(); j++) 
            {    
                if(grid[i][j] == 1) {
                    bfs(grid, i, j, peri);
                    return peri;
                }   
            }
        }
        return -1;
    }
};
