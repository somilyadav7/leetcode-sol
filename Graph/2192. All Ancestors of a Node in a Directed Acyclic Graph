You are given a positive integer n representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from 0 to n - 1 (inclusive).
You are also given a 2D integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph.
Return a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order.
A node u is an ancestor of another node v if u can reach v via a set of edges.
Input: n = 8, edgeList = [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]]
Output: [[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]]
Explanation:
The above diagram represents the input graph.
- Nodes 0, 1, and 2 do not have any ancestors.
- Node 3 has two ancestors 0 and 1.
- Node 4 has two ancestors 0 and 2.
- Node 5 has three ancestors 0, 1, and 3.
- Node 6 has five ancestors 0, 1, 2, 3, and 4.
- Node 7 has four ancestors 0, 1, 2, and 3.
class Solution {
public:
    void DFS(int u, unordered_map<int, vector<int>> &adj, vector<bool> &visited)
    {
        visited[u]=true;
        for(auto &i:adj[u])
        {
            if(visited[i]==false)
                DFS(i,adj,visited);
        }
    }

    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        vector<vector<int>> ans;
        unordered_map<int, vector<int>> adj;
        for(auto &i:edges)
        {
            int u=i[0];
            int v=i[1];
            adj[v].push_back(u);
        }
        for(int u=0; u<n; u++)
        {
            vector<int> ancestors;
            vector<bool> visited(n,false);
            DFS(u,adj,visited);
            for(int i=0; i<n; i++)
            {
                if(i==u)    continue;
                if(visited[i]==true)
                    ancestors.push_back(i);
            }
            ans.push_back(ancestors);
        }
        return ans;
    }
};
