class Solution {
public:
    long long wonderfulSubstrings(string word) {
        unordered_map<long long, long long> mp;
        mp[0]=1;
        long long cum_xor=0, result=0;
        for(char &ch:word)
        {
            int shift = ch - 'a';
            cum_xor = cum_xor ^ (1<<shift);
            result+=mp[cum_xor];    //only even substring
            for(char i='a'; i<='j'; i++)
            {
                shift = i - 'a';
                long long check_xor = cum_xor ^ (1<<shift);
                result+=mp[check_xor];      //for 1 odd occurence
            }
            mp[cum_xor]++;
        }
        return result;
    }
};


//better performance
class Solution {
public:
    long long wonderfulSubstrings(string word) {
        vector<int> cnt(1024,0);
        cnt[0]=1;
        long long result=0;
        int cum_xor=0;
        for(auto &ch:word)
        {
            int shift = ch - 'a';
            cum_xor = cum_xor ^ (1<<shift);
            result+=cnt[cum_xor];    //only even substring
            for(int i=0; i<10; i++)
            {
                int check_xor = cum_xor ^ (1<<i);
                result+=cnt[check_xor];      //for 1 odd occurence
            }
            cnt[cum_xor]++;
        }
        return result;
    }
};
