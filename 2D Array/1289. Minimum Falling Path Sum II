class Solution {
public:
    int help(int i, int j, vector<vector<int>>& grid, vector<vector<int>> &dp)
    {
        if(i==grid.size()-1)
        {
            return grid[i][j];
        }
        if(dp[i][j]!=-1)
            return dp[i][j];
        int ans=INT_MAX;
        for(int k=0; k<grid.size(); k++)
        {
            if(k!=j)
                ans=min(ans,help(i+1,k,grid,dp));
        }
        return dp[i][j] = ans+grid[i][j];
    }

    int minFallingPathSum(vector<vector<int>>& grid) {
        int n=grid.size(), ans=INT_MAX;
        vector<vector<int>> dp(n,vector<int>(n,-1));
        for(int j=0; j<n; j++)
        {
            ans=min(ans,help(0,j,grid,dp));
        }
        return ans;
    }
};

//Approach-2 (Bottom Up)
//T.C : O(N^3)
//S.C : O(N^2)
class Solution {
public:
    int n;
    
    int minFallingPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        
        vector<vector<int>> t(n, vector<int>(n, INT_MAX));

        for (int col = 0; col < n; col++) {
            t[n - 1][col] = grid[n - 1][col];
        }

        for (int row = n - 2; row >= 0; row--) {
            for (int col = 0; col < n; col++) {
                int ans = INT_MAX;
                for (int nextCol = 0; nextCol < n; nextCol++) {
                    if (nextCol != col) {
                        ans = min(ans, t[row + 1][nextCol]);
                    }
                }
                t[row][col] = grid[row][col] + ans;
            }
        }

        int result = INT_MAX;
        for (int col = 0; col < n; col++) {
            result = min(result, t[0][col]);
        }

        return result;
    }
};
