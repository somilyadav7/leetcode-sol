You are given a string s and two integers x and y. You can perform two types of operations any number of times.

Remove substring "ab" and gain x points.
For example, when removing "ab" from "cabxbae" it becomes "cxbae".
Remove substring "ba" and gain y points.
For example, when removing "ba" from "cabxbae" it becomes "cabxe".
Return the maximum points you can gain after applying the above operations on s.

 

Example 1:

Input: s = "cdbcbbaaabab", x = 4, y = 5
Output: 19
Explanation:
- Remove the "ba" underlined in "cdbcbbaaabab". Now, s = "cdbcbbaaab" and 5 points are added to the score.
- Remove the "ab" underlined in "cdbcbbaaab". Now, s = "cdbcbbaa" and 4 points are added to the score.
- Remove the "ba" underlined in "cdbcbbaa". Now, s = "cdbcba" and 5 points are added to the score.
- Remove the "ba" underlined in "cdbcba". Now, s = "cdbc" and 5 points are added to the score.
Total score = 5 + 4 + 5 + 5 = 19.
Example 2:

Input: s = "aabbaaxybbaabb", x = 5, y = 4
Output: 20


class Solution {
public:
    string help(string &s, string &str)
    {
        stack<char> st;
        for(auto &i:s)
        {
            if(!st.empty() && i==str[1] && st.top()==str[0])
                st.pop();
            else
                st.push(i);
        }
        string temp;
        while(!st.empty())
        {
            temp.push_back(st.top());
            st.pop();
        }
        reverse(temp.begin(),temp.end());
        return temp;
    }

    int maximumGain(string s, int x, int y) {
        int n=s.length(),ans=0;
        string maxi=(x>y)?"ab":"ba";
        string mini=(y<x)?"ba":"ab";
        string first=help(s,maxi);
        int l1=first.length();
        ans+=((n-l1)/2)*max(x,y);
        string second=help(first,mini);
        int l2=second.length();
        ans+=((l1-l2)/2)*min(x,y);
        return ans;
    }
};
