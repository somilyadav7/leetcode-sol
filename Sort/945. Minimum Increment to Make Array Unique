You are given an integer array nums. In one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1.
Return the minimum number of moves to make every value in nums unique.
The test cases are generated so that the answer fits in a 32-bit integer.

Example 1:
Input: nums = [1,2,2]
Output: 1
Explanation: After 1 move, the array could be [1, 2, 3].

Example 2:
Input: nums = [3,2,1,2,1,7]
Output: 6
Explanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7].
It can be shown with 5 or less moves that it is impossible for the array to have all unique values.

class Solution {
public:
    int minIncrementForUnique(vector<int>& nums) {
        int maxi=*max_element(begin(nums),end(nums));
        int n=nums.size(), ans=0;
        vector<int> arrSize(maxi+1+n);
        for(auto i:nums)
            arrSize[i]++;
        for(int i=0; i<arrSize.size()-1; i++)
        {
            if(arrSize[i]<=1)
                continue;
            int moves=arrSize[i]-1;
            ans+=moves;
            arrSize[i]=1;
            arrSize[i+1]+=moves;
        }
        return ans;
    }
};
