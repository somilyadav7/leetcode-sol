You are given a 0-indexed integer array nums. There exists an array arr of length nums.length, where arr[i] is the sum of |i - j| over all j such that nums[j] == nums[i] and j != i. If there is no such j, set arr[i] to be 0.
Return the array arr.

Example 1:

Input: nums = [1,3,1,1,2]
Output: [5,0,3,4,0]
Explanation: 
When i = 0, nums[0] == nums[2] and nums[0] == nums[3]. Therefore, arr[0] = |0 - 2| + |0 - 3| = 5. 
When i = 1, arr[1] = 0 because there is no other index with value 3.
When i = 2, nums[2] == nums[0] and nums[2] == nums[3]. Therefore, arr[2] = |2 - 0| + |2 - 3| = 3. 
When i = 3, nums[3] == nums[0] and nums[3] == nums[2]. Therefore, arr[3] = |3 - 0| + |3 - 2| = 4. 
When i = 4, arr[4] = 0 because there is no other index with value 2.

class Solution {
public:
    vector<long long> distance(vector<int>& nums) {
        unordered_map<int,vector<int>> mp;
        int n=nums.size();
        vector<long long> ans(n);
        for(int i=0; i<n; i++)
        {
            mp[nums[i]].push_back(i);
        }
        for(auto it:mp)
        {
            long long sum=0, cursum=0, restsum=0;
            vector<int> arr=it.second;
            for(auto i:arr)
                sum+=(long long)i;
            for(int i=0; i<arr.size(); i++)
            {
                restsum=sum-cursum-arr[i];
                long long left=(arr[i]*(long long)i)-cursum;
                long long right=restsum-(arr[i]*(long long)(arr.size()-i-1));
                ans[arr[i]]=left+right;
                cursum+=arr[i];
            }
        }
        return ans;
    }
};
