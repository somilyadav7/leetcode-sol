//Brute Force
//TLE
class Solution {
public:
    int bfs(vector<vector<int>> &graph, vector<int> &vis, int cur)
    {
        queue<int> q;
        q.push(cur);
        vis[cur]=1;
        int level=0;
        while(!q.empty())
        {
            int n=q.size();
            while(n--)
            {
                int temp=q.front();
                q.pop();
                for(auto i:graph[temp])
                {
                    if(!vis[i])
                    {
                        q.push(i);
                        vis[i]=1;
                    }
                }
            }
            level++;
        }
        return level;
    }

    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        vector<vector<int>> graph(n);
        int mini=INT_MAX;
        vector<int> ans, temp;
        for(int i=0; i<edges.size(); i++)
        {
            graph[edges[i][0]].push_back(edges[i][1]);
            graph[edges[i][1]].push_back(edges[i][0]);
        }
        for(int i=0; i<n; i++)
        {
            vector<int> vis(n,0);
            int h = bfs(graph,vis,i);
            mini=min(mini,h-1);
            temp.push_back(h-1);
        }
        for(int i=0; i<n; i++)
        {
            if(temp[i]==mini)
                ans.push_back(i);
        }
        return ans;
    }
};


//T.C : O(V+E)
//S.C : O(V+E)
class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if(n == 1)
            return {0};
        
        vector<int> result;
        vector<int> indegree(n);
        map<int, vector<int>> adj;
        
        for(vector<int> vec:edges) {
            int u = vec[0];
            int v = vec[1];
            indegree[u]++;
            indegree[v]++;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        
        queue<int> que;
        for(int i = 0; i<n; i++) {
            if(indegree[i] == 1) //adding all leafs node so that we can remove them later
                que.push(i);
        }
        
        while(n > 2) {
            int size = que.size();
            n -= size; //removing nodes with indegreee 1
            
            while(size--) {
                int u = que.front();
                que.pop();
                for(int v:adj[u]) {
                    indegree[v]--;
                    if(indegree[v] == 1)
                        que.push(v);
                }
            }
        }
        
        while(!que.empty()) {
            result.push_back(que.front());
            que.pop();
        }
        return result;
    }
};
